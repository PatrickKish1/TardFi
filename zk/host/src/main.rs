use std::process;
use std::env;
use std::sync::Arc;

use axum::http::header::ACCESS_CONTROL_ALLOW_HEADERS;
use axum::routing::{ get, post };
use axum::{ middleware, Router };
use dotenv::dotenv;
// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use db::{ establish_connection };
use host::tokenization::complete_tokenization_by_id;
use host::comment::get_comment_by_oil_token_id;
use host::overall::get_overall_state_handler;
use host::overall::sync_state_handler;
use host::sync_state;
use tower_http::cors::ExposeHeaders;
use tower_http::cors::{ Any, CorsLayer };

use host::saved_token::create_saved_token;
use host::saved_token::get_saved_tokens;
use host::saved_token::get_saved_tokens_by_user;
use host::{
    oil_token::{ get_all_oil_tokens_handler, create_oil_token, get_oil_token_by_id },
    tokenization::{ get_tokenization_by_id, get_tokenizations, create_tokenization },
    comment::{ create_comment, get_comments },
};

use host::{
    overall::init_overall_handler,
    auth::{ auth, verify_auth_handler, verify_signature_handler, get_verify_handler },
    tokenization::init_tokenization_handler,
    comment::init_comment_handler,
    oil_token::init_oil_token_handler,
};

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    dotenv().ok();
    let database_url = env::var("DATABASE_URL").unwrap_or_else(|_| {
        eprintln!("Error: DATABASE_URL environment variable is required");
        eprintln!("Please make sure you have a .env file with DATABASE_URL set");
        eprintln!("Example: DATABASE_URL=postgres://user:password@localhost:5432/oil_tokenization");
        process::exit(1);
    });
    let db = establish_connection(&database_url).await?;
    let db = Arc::new(db);

    let cors = CorsLayer::new()
        .allow_origin(Any) // allow frontend origin
        .allow_methods(Any) // or restrict: .allow_methods([Method::GET, Method::POST])
        .allow_headers(Any) // or restrict
        .expose_headers(Any); // Expose

    // Create the router with our endpoints
    let protected_routes = Router::new()
        .route("/api/oil_tokens", post(create_oil_token))
        .route("/api/tokenizations", post(create_tokenization))
        .route("/api/comments", post(create_comment))
        .route("/api/save_token", post(create_saved_token)) // save token
        .route("/api/tokenizations/{id}/complete", post(complete_tokenization_by_id)) // complete tokenization
        .route_layer(middleware::from_fn(auth))
        .with_state(db.clone());

    let app = Router::new()
        .route("/api/oil_tokens/{id}", get(get_oil_token_by_id))
        .route("/api/oil_tokens", get(get_all_oil_tokens_handler))
        .route("/api/tokenizations", get(get_tokenizations))
        .route("/api/tokenizations/{id}", get(get_tokenization_by_id))
        .route("/api/comments", get(get_comments))
        .route("/api/comments/{id}", get(get_comment_by_oil_token_id))
        // save
        .route("/api/saved_tokens/{user}", get(get_saved_tokens_by_user)) // get user saved items
        .route("/api/tokens/saved/{id}", get(get_saved_tokens)) // get all saved by token_id
        //init
        .route("/api/tokenizations/init", get(init_tokenization_handler))
        .route("/api/oil_tokens/init", get(init_oil_token_handler))
        .route("/api/comments/init", get(init_comment_handler))
        .route("/api/db/init", get(init_overall_handler))

        // verify auth
        .route("/api/auth", get(get_verify_handler))
        .route("/api/auth", post(verify_signature_handler))
        .route("/api/auth/verify", post(verify_auth_handler))
        .route("/api/state", get(get_overall_state_handler))
        .route("/api/sync", get(sync_state_handler))
        .merge(protected_routes)
        .layer(cors)
        .with_state(db);

    // Initialize tracing. In order to view logs, run `RUST_LOG=info cargo run`
    tracing_subscriber
        ::fmt()
        .with_env_filter(tracing_subscriber::filter::EnvFilter::from_default_env())
        .init();

    // Start the server
    let listener = tokio::net::TcpListener::bind("0.0.0.0:3001").await?;
    println!("Oil Tokenization Platform Server running on http://0.0.0.0:3001");
    axum::serve(listener, app.into_make_service()).await?;
    Ok(())
}
