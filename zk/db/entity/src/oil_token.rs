//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use super::sea_orm_active_enums::TokenStatus;
use sea_orm::entity::prelude::*;
use serde::{ Deserialize, Serialize };
use rust_decimal::Decimal;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Deserialize, Serialize)]
#[sea_orm(table_name = "oil_token")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub token_id: i32,
    pub oil_type: String,
    pub grade: String,
    pub quantity: Decimal,
    pub unit: String,
    pub location: String,
    pub certification: String,
    pub quality_report: Json,
    pub storage_conditions: Json,
    pub expiry_date: DateTime,
    pub current_price: Decimal,
    pub reserve_price: Decimal,
    pub status: Option<TokenStatus>,
    pub owner: String,
    pub created_at: DateTime,
    pub updated_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::tokenization::Entity")]
    Tokenization,
}

impl Related<super::tokenization::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Tokenization.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
